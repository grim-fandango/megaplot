
; ******** Source: c:\Users\jkrob\OneDrive\Documents\MEGA65\megaplot\megaplot.a
     1                          !to "megaplot.prg", cbm
     2                          
     3                          SCRNBASE = $0800
     4                          //COLRBASE = $d800
     5                          COLRBASE = $f800 //Bank 1
     6                          ROWPTR = $fb
     7                          COLPTR = $45
     8                          
     9                          * = $7e00
    10                          
    11                          // basicstub:		!byte $00,$0a,$20,$0a,$00,$fe,$02,$20
    12                          //				!byte $30,$00,$16,$20,$14,$00,$9e,$20
    13                          //				!byte $24,$32,$30,$31,$38,$00,$00,$00
    14                          
    15                          // a = colour, x = x coordinate, y = y coord
    16                          
    17                          start:			// populate properties and initialise
    18                          
    19  7e00 8df97e             				sta xpos
    20  7e03 8efa7e             				stx ypos
    21  7e06 8cfb7e             				sty colour
    22                          
    23  7e09 a900               				lda #$00
    24  7e0b 8d137f             				sta virtual
    25  7e0e 8dfe7e             				sta xhalf
    26  7e11 8dff7e             				sta yhalf
    27  7e14 8548               				sta COLPTR + 3
    28  7e16 a901               				lda #$01
    29  7e18 8547               				sta COLPTR + 2
    30                          
    31  7e1a a950               				lda #80
    32  7e1c 8d027f             				sta mode4080
    33                          
    34                          				// 40 or 80 column screen?
    35  7e1f ad31d0             				lda $d031
    36  7e22 2980               				and #$80
    37  7e24 d011               				bne Validate80
    38  7e26 a928               				lda #40
    39  7e28 8d027f             				sta mode4080
    40                          
    41  7e2b adf97e             Validate40:		lda xpos 
    42  7e2e c950               				cmp #80
    43  7e30 9011               				bcc xok
    44  7e32 a927               				lda #39
    45  7e34 8df97e             				sta xpos
    46                          
    47                          				// validate values
    48  7e37 adf97e             Validate80:		lda xpos
    49  7e3a c9a0               				cmp #160
    50  7e3c 9005               				bcc xok
    51  7e3e a99f               				lda #159
    52  7e40 8df97e             				sta xpos
    53                          
    54  7e43 adfa7e             xok:			lda ypos 
    55  7e46 c932               				cmp #50
    56  7e48 9008               				bcc GetCharPosns
    57  7e4a a931               				lda #49
    58  7e4c 8dfa7e             				sta ypos
    59  7e4f ee20d0             				inc $d020
    60                          
    61                          
    62                          GetCharPosns:	// find character positions
    63                          				//divide x by 2
    64  7e52 18                 				clc
    65  7e53 adf97e             				lda xpos
    66  7e56 6a                 				ror
    67  7e57 8dfc7e             				sta screenx
    68                          				// is it an odd number?  Then we need a right half pixel to be set
    69  7e5a 9005               				bcc xhalfDone
    70  7e5c a9ff               				lda #$ff
    71  7e5e 8dfe7e             				sta xhalf
    72                          
    73                          				//divide y by 2
    74  7e61 18                 xhalfDone:		clc
    75  7e62 adfa7e             				lda ypos
    76  7e65 6a                 				ror
    77  7e66 8dfd7e             				sta screeny
    78                          				// is it an odd number?  Then we need a bottom half pixel to be set
    79  7e69 9005               				bcc WhichChar
    80  7e6b a9ff               				lda #$ff
    81  7e6d 8dff7e             				sta yhalf
    82                          
    83                          WhichChar:		// Which character do we need?
    84                          				// Where are we plotting?  Get screen location
    85                          
    86  7e70 a200               				ldx #<SCRNBASE
    87  7e72 a008               				ldy #>SCRNBASE
    88  7e74 86fb               				stx ROWPTR
    89  7e76 84fc               				sty ROWPTR + 1
    90                          
    91  7e78 a200               				ldx #<COLRBASE
    92  7e7a a0f8               				ldy #>COLRBASE
    93  7e7c 8645               				stx COLPTR
    94  7e7e 8446               				sty COLPTR + 1
    95                          			
    96  7e80 a200               				ldx #$00
    97  7e82 acfd7e             				ldy screeny
    98  7e85 c8                 				iny
    99                          
   100                          rowloopy:		// loop through the rows until we get to the start of the screen row 
   101  7e86 88                 				dey
   102  7e87 f01c               				beq LineFound			  
   103  7e89 18                 				clc
   104  7e8a a5fb               				lda ROWPTR
   105  7e8c 7d027f             				adc mode4080,x
   106  7e8f 85fb               				sta ROWPTR
   107  7e91 18                 				clc 
   108  7e92 a545               				lda COLPTR
   109  7e94 7d027f             				adc mode4080,x
   110  7e97 8545               				sta COLPTR
   111  7e99 b003               				bcs nextpagey
   112  7e9b 4c867e             				jmp rowloopy
   113  7e9e e6fc               nextpagey:		inc ROWPTR + 1
   114  7ea0 e646               				inc COLPTR + 1
   115  7ea2 4c867e             				jmp rowloopy		
   116                          
   117                          LineFound:		// y is the x coordinate to print to
   118  7ea5 acfc7e             				ldy screenx
   119                          				
   120                          				// -----------------------------------------------
   121                          
   122                          				// Is there already a plot character in the box?
   123                          CheckChar:		// Is it in the list?  If so, which bit pattern?
   124  7ea8 a200               				ldx #$00
   125  7eaa bd037f             NextChar:		lda bitpatterns,x
   126  7ead d1fb               				cmp (ROWPTR),y
   127  7eaf f005               				beq CheckDone
   128  7eb1 e8                 				inx
   129  7eb2 e010               				cpx #$10
   130  7eb4 d0f4               				bne NextChar
   131                          
   132                          CheckDone:		// if we reach the end of the list there isn't a battenburg so just go ahead and plot
   133  7eb6 e010               				cpx #$10
   134  7eb8 f003               				beq PlotNew
   135                          
   136                          				// there is already a plot point in the character square, store its nybble representation
   137  7eba 8e137f             				stx virtual
   138                          
   139                          PlotNew:		// CHECK THE LOGIC HERE AS IT MAY BE 
   140                          
   141                          				// if on left, bits 1 or 3
   142  7ebd adfe7e             				lda xhalf
   143  7ec0 d00f               				bne SetRightBit  // plot must be on the right of the battenburg
   144                          				// since bits 1 or 3 is set, we are on the left - top left or bottom left?
   145  7ec2 adff7e             				lda yhalf
   146  7ec5 f005               				beq SetTopLeft
   147  7ec7 a204               				ldx #$04 // bottom left
   148  7ec9 4cdd7e             				jmp Combine
   149  7ecc a201               SetTopLeft:		ldx #$01 // top left	
   150  7ece 4cdd7e             				jmp Combine
   151                          
   152  7ed1 adff7e             SetRightBit:	lda yhalf
   153  7ed4 f005               				beq SetTopRight
   154  7ed6 a208               				ldx #$08
   155  7ed8 4cdd7e             				jmp Combine
   156  7edb a202               SetTopRight:	ldx #$02
   157                          
   158                          Combine:		// combine the new bit with those of any pre-existing bits 
   159  7edd 8a                 				txa
   160  7ede 0d137f             				ora virtual
   161  7ee1 aa                 				tax
   162                          
   163                          				// What's the character corresponding to the combined bit pattern?
   164  7ee2 bd037f             NextCharOut:	lda bitpatterns,x
   165                          				
   166  7ee5 91fb               Plot:			sta (ROWPTR),y
   167  7ee7 adfb7e             				lda colour
   168  7eea aa                 				tax
   169  7eeb 98                 				tya
   170  7eec 4b                 				taz
   171  7eed 8a                 				txa
   172  7eee ea9245             				sta [COLPTR],z
   173                          
   174  7ef1 a6fb               DumpReg:		ldx ROWPTR
   175  7ef3 a4fc               				ldy ROWPTR + 1
   176  7ef5 abfe7e             				ldz xhalf
   177  7ef8 60                 				rts
   178                          
   179                          
   180  7ef9 00                 xpos:			!byte $00
   181  7efa 00                 ypos:			!byte $00
   182  7efb 00                 colour:			!byte $00
   183  7efc 00                 screenx:		!byte $00
   184  7efd 00                 screeny:		!byte $00
   185  7efe 00                 xhalf:			!byte $00 // ff if the point is on the right of the character square
   186  7eff 00                 yhalf:			!byte $00 // ff if the point is on the bottom of the character square
   187  7f00 0008               linestartscrn:	!word $0800
   188  7f02 50                 mode4080:       !byte 80
   189  7f03 207e7ce27b61ffec...bitpatterns:	!byte $20,$7e,$7c,$e2,$7b,$61,$ff,$ec,$6c,$7f,$e1,$fb,$62,$fc,$fe,$a0
