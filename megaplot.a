!to "megaplot.prg", cbm

SCRNBASE = $0800
//COLRBASE = $d800
COLRBASE = $f800 //Bank 1
ROWPTR = $fb
COLPTR = $45

* = $7e00

// basicstub:		!byte $00,$0a,$20,$0a,$00,$fe,$02,$20
//				!byte $30,$00,$16,$20,$14,$00,$9e,$20
//				!byte $24,$32,$30,$31,$38,$00,$00,$00

// a = colour, x = x coordinate, y = y coord

start:			// populate properties and initialise

				sta xpos
				stx ypos
				sty colour

				lda #$00
				sta virtual
				sta xhalf
				sta yhalf
				sta COLPTR + 3
				lda #$01
				sta COLPTR + 2

				lda #80
				sta mode4080

				// 40 or 80 column screen?
				lda $d031
				and #$80
				bne Validate80
				lda #40
				sta mode4080

Validate40:		lda xpos 
				cmp #80
				bcc xok
				lda #39
				sta xpos

				// validate values
Validate80:		lda xpos
				cmp #160
				bcc xok
				lda #159
				sta xpos

xok:			lda ypos 
				cmp #50
				bcc GetCharPosns
				lda #49
				sta ypos
				inc $d020


GetCharPosns:	// find character positions
				//divide x by 2
				clc
				lda xpos
				ror
				sta screenx
				// is it an odd number?  Then we need a right half pixel to be set
				bcc xhalfDone
				lda #$ff
				sta xhalf

				//divide y by 2
xhalfDone:		clc
				lda ypos
				ror
				sta screeny
				// is it an odd number?  Then we need a bottom half pixel to be set
				bcc WhichChar
				lda #$ff
				sta yhalf

WhichChar:		// Which character do we need?
				// Where are we plotting?  Get screen location

				ldx #<SCRNBASE
				ldy #>SCRNBASE
				stx ROWPTR
				sty ROWPTR + 1

				ldx #<COLRBASE
				ldy #>COLRBASE
				stx COLPTR
				sty COLPTR + 1
			
				ldx #$00
				ldy screeny
				iny

rowloopy:		// loop through the rows until we get to the start of the screen row 
				dey
				beq LineFound			  
				clc
				lda ROWPTR
				adc mode4080,x
				sta ROWPTR
				clc 
				lda COLPTR
				adc mode4080,x
				sta COLPTR
				bcs nextpagey
				jmp rowloopy
nextpagey:		inc ROWPTR + 1
				inc COLPTR + 1
				jmp rowloopy		

LineFound:		// y is the x coordinate to print to
				ldy screenx
				
				// -----------------------------------------------

				// Is there already a plot character in the box?
CheckChar:		// Is it in the list?  If so, which bit pattern?
				ldx #$00
NextChar:		lda bitpatterns,x
				cmp (ROWPTR),y
				beq CheckDone
				inx
				cpx #$10
				bne NextChar

CheckDone:		// if we reach the end of the list there isn't a battenburg so just go ahead and plot
				cpx #$10
				beq PlotNew

				// there is already a plot point in the character square, store its nybble representation
				stx virtual

PlotNew:		// CHECK THE LOGIC HERE AS IT MAY BE 

				// if on left, bits 1 or 3
				lda xhalf
				bne SetRightBit  // plot must be on the right of the battenburg
				// since bits 1 or 3 is set, we are on the left - top left or bottom left?
				lda yhalf
				beq SetTopLeft
				ldx #$04 // bottom left
				jmp Combine
SetTopLeft:		ldx #$01 // top left	
				jmp Combine

SetRightBit:	lda yhalf
				beq SetTopRight
				ldx #$08
				jmp Combine
SetTopRight:	ldx #$02

Combine:		// combine the new bit with those of any pre-existing bits 
				txa
				ora virtual
				tax

				// What's the character corresponding to the combined bit pattern?
NextCharOut:	lda bitpatterns,x
				
Plot:			sta (ROWPTR),y
				lda colour
				tax
				tya
				taz
				txa
				sta [COLPTR],z

DumpReg:		ldx ROWPTR
				ldy ROWPTR + 1
				ldz xhalf
				rts


xpos:			!byte $00
ypos:			!byte $00
colour:			!byte $00
screenx:		!byte $00
screeny:		!byte $00
xhalf:			!byte $00 // ff if the point is on the right of the character square
yhalf:			!byte $00 // ff if the point is on the bottom of the character square
linestartscrn:	!word $0800
mode4080:       !byte 80
bitpatterns:	!byte $20,$7e,$7c,$e2,$7b,$61,$ff,$ec,$6c,$7f,$e1,$fb,$62,$fc,$fe,$a0
virtual:		!byte $00